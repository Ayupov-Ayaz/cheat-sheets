<?php
namespace app\patterns;
/************************************************************************************************************************************
 * Prototype (Прототип)                                                                                                             *
 ************************************************************************************************************************************
 * Порождающий паттерн проектирования, который позволяет копировать объекты, не вдаваясь в подробности их реализации                *
 * Достойнство: Вводится общий интерфей для всех объектов, который поддерживают метод клонирования. Это позволит клонировать        *
 * объекты, не привязываясь к конкретным классам. Обычно этот интерфейс имеет всего один метод - clone()                            *
 * Структура: Прототип может быть с базовой реализацией и с общим хранилищем прототипов                                             *
 * Правила структуры:                                                                                                               * 
 * a) Интерфейс обязательно описывает метод clone()                                                                                 *  
 * b) Конкретный прототип реализует метод слонирования самого себя, помимо банального копирования значений всех полей здесь могут   *
 * быть спрятаны различные сложности о которых не нужно знать клиенту. Например клонирования связанных объектов, распутывание       *
 * рекурсивных зависимостей и п.р.                                                                                                  *
 * с) Клиент создает копию объекта, обращаясь к нему через общий метод интерфейса прототипа                                         *
 * d) Хранилище прототипов облегчает доступ к часто используемым прототипам, храня предсозданные наборы готовых к копированию       *
 * объектов                                                                                                                         *
 ***********************************************************************************************************************************/

 abstract class Unit{}

 // Наш класс солдат
 class Soldier extends Unit
 {
     public $hp;
     public $attack;
     public $arrmor;
     
     public function __construct(int $hp, int $attack, int $armor){
        $this->hp = $hp;
        $this->attack = $attack;
        $this->armor = $armor;
     }

     public function info(){
         return "У солдата " . $this->hp . " здоровья, " . $this->attack . "- атаки, ". $this->armor ."- показатель брони <br>";
     }
 }

 // Класс, который будет улучшать нашего солдата
 class Polygon
 {
     private $unit;

     public function __construct(Unit $unit){
         $this->unit = $unit;
     }

     public function train(){
        $this->unit->hp++;
        $this->unit->attack++;
        $this->unit->armor++;
     }
 }

// Класс, который занимается созданием похожих объектов, может создать клона любого объекта, не обязательно только нашего. При условии, что функция clone() не приватная
 class  Barrack
 {
    private $unit;

    public function __construct($unit){
        $this->unit = $unit;
    }

    public function createUnit(){
        return clone $this->unit;
    }
 }


 // Использование:

 // Создаем нашего солдата с начальными данными здоровья, атаки, брони
 $soldier = new Soldier(50, 5, 3);
 // Создаем класс полигон, где будет тернировать нашего солдата
 $polygon = new Polygon($soldier);
 $polygon->train();
 echo 'Тренированный солдат: ' . $soldier->info();

 // Создаем класс Барраки где будем создавать клонов нашего солдата
 $barrack = new Barrack($soldier);

 $clone = $barrack->createUnit();
 echo 'Клонированный солдат: ' . $clone->info();



